Google Developer Day Beijing-Guice,Java Dependency Injection
https://www.youtube.com/watch?v=x_NpraeC3tk

Sample:
(---> depends)

ClientTest --> Client --> Service
						   	|
						ServiceImpl

public interface Service {
	void go()

}

public class ServieImpl implements Service{
	public void go(){
		// some expensive stuff
		// something like charging a credit card
	}
}

public class MockService implements Service{
		private boolean gone = false;
		
		public void go(){
			gone = true;
		}

		public boolean isGone(){
			return gone;
		}
}



1. Factory pattern

	// client class
	public class Client{
		public void go(){
			Service serveice = ServiceFactory.getInstance();
			service.go();
		}
	}

	// session factory, with ablity to swap instance
	public class ServiceFactory{
		// a simple singleton here
		private ServiceFactory(){}

		private static Service instance = new ServiceImpl();

		public static service getIntance(){
			return instance;
		}

		public static void setIntance(Service service){
			instance = service;

		}
	}

	// test class
	public void testClient(){
		Service previous = ServiceFactory.getInstanace();
		try{
			final MockService mock = new MockService();
			sessionFactory.setInstance(mock);
			Client client = new Client();
			client.go();
			assertTrue(mock.isGone());
		}
		finally{
			//	swap back in
			//	to make unit test idempotent
			//	when you have many dependency, it will become diffucult
			ServiceFactory.setInstance(previous);
		}
	}

	Question 1: How do we know client depends on service?
	Answer: you need to look at the implementation of client to know it depends on Service. (Super Important!)

	Question 2: Why do we need to reset those factory?
	Answer 2: our unit test had to pass the mock to the factory and then clean up. Tests to be idempotent. 

	Question 3: How many factory do we need to write?
	Answer 3: One factory per dependency. That's every annoying!!!! Any people write this inconsistent way.


2. Dependency injection by hand (inject the dependency)
	// client class
	private final Service service;

	public Client(Service service){
		this.service = services;
	}

	public void go(){
		service.go();
	}

	// test code
	public void testClient(){
		final MockService mock = new MockService();
		Client client = new Client(mock);
		client.go();
		assertTrue(mock.isGone());
	}

	// painful thing
	// needs to figure out the dependency upfront

3. Guice dependency injection
